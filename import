#!/bin/bash
###########################################
# import                                  #
# Author: Tay Kratzer - tay@cimitra.com   #
# Version: 1.0                            #
# Modify date: 3/7/2020                   #
###########################################
# Cimitra Command/Script Import Tool

TEMP_FILE_DIRECTORY="/var/tmp"

declare -i CIMITRA_SERVER_ADMIN_PASSWORD_SET=0
declare -i CIMITRA_SERVER_ADMIN_ACCOUNT_SET=0
declare -i CIMITRA_APP_NAME_IN_SET=0
declare -i CIMITRA_APP_COMMAND_IN_SET=0
declare -i CIMITRA_APP_DESCRIPTION_IN_SET=0
declare -i SHOW_HELP_SCREEN=0
declare -i RUN_CONNECTION_TEST=0
declare CURL_OUTPUT_MODE="--silent"
declare -i SILENT_MODE=0
declare CIMITRA_SERVER_ADDRESS=""
declare CIMITRA_SERVER_PORT=""
declare CIMITRA_PAIRED_AGENT_ID=""
declare CIMITRA_PAIRED_AGENT_PLATFORM="linux"
declare CIMITRA_API_SESSION_TOKEN=""
declare CIMITRA_ADMIN_CHECK="roles:255"
CIMITRA_AGENT_BIN_FILE=""
declare -i VERBOSE_MODE=0


declare CIMITRA_IMPORT_ROOT_FOLDER_ID=""
declare CIMITRA_ROOT_FOLDER_ID=""
declare CIMITRA_IMPORT_HOSTNAME_ROOT_FOLDER_ID=""
declare -i FOLDER_ID_IN_SET=0
declare -i INCLUDE_REGEX_EXAMPLE_SWITCHES=0


while getopts "f:n:u:p:c:i:hrtv" opt; do
  case ${opt} in
    p) CIMITRA_SERVER_ADMIN_PASSWORD="$OPTARG"
	CIMITRA_SERVER_ADMIN_PASSWORD_SET=1
      ;;
    u) CIMITRA_SERVER_ADMIN_ACCOUNT="$OPTARG"
	CIMITRA_SERVER_ADMIN_ACCOUNT_SET=1
      ;;
    n) CIMITRA_APP_NAME_IN="$OPTARG"
	CIMITRA_APP_NAME_IN_SET=1
      ;;
    c) CIMITRA_APP_COMMAND_IN="$OPTARG"
	CIMITRA_APP_COMMAND_IN_SET=1
	;;
    f) FOLDER_ID_IN="$OPTARG"
	FOLDER_ID_IN_SET=1
	;;
    i) CIMITRA_APP_INTERPRETER_IN="$OPTARG"
	CIMITRA_APP_INTERPRETER_IN_SET=1
	;;
    h) SHOW_HELP_SCREEN=1
      ;;
    r) INCLUDE_REGEX_EXAMPLE_SWITCHES=1
      ;;
    s) SILENT_MODE=1
      ;;
    t) RUN_CONNECTION_TEST=1
      ;;
    v) CURL_OUTPUT_MODE=""
	VERBOSE_MODE=1
      ;;
  esac
done

SCRIPT_PATH="$( cd "$(dirname "$0")" ; pwd -P )"

### Help Screen ###
function SHOW_HELP()
{
echo "--- Script Help ---"
echo ""
echo "Cimitra Command/Script Import Tool"
echo ""
echo "Script usage:      $0 [options]"
echo ""
echo "Example:           $0 -u <Cimitra user> -p <user password> -c \"<command to import>\" -i \"<interpreter>\" -n \"App Name\""
echo ""
echo "Example:           $0 -u admin@cimitra.com -p changeme -c \"/usr/sbin/rcapache2 restart\" -i \"/bin/bash\" -n \"Restart Web Server\""
echo ""
echo "Include Validing Regex Examples For The Cimitra App:  $0 -r ..."
echo ""
echo "Verbose Mode:      $0 -v ..."
echo ""
echo "Help:              $0 -h"
echo ""
}

function CONFIRM_CORRECT_INPUT()
{

declare -i ALL_SET=0

let ALL_SET=CIMITRA_SERVER_ADMIN_PASSWORD_SET+CIMITRA_SERVER_ADMIN_ACCOUNT_SET+CIMITRA_APP_COMMAND_IN_SET

if [ $ALL_SET -ne 3 ]
then
SHOW_HELP
echo ""
echo "NOTE: Insufficient Input To Run Script"
echo ""
exit 1
fi

}

function GET_URL()
{
IO_FILE="$1"

# Read values from IO File

source ${IO_FILE}

BASEURL="https://${CIMITRA_SERVER_ADDRESS}:${CIMITRA_SERVER_PORT}/api"

URL="${BASEURL}${ENDPOINT}" 

declare RESPONSE=`curl -k ${CURL_OUTPUT_MODE} -H 'Accept: application/json' \
-H "Authorization: Bearer ${CIMITRA_API_SESSION_TOKEN}" \
-X GET ${URL}`

echo "$RESPONSE" | sed -e 's/[}"]*\(.\)[{"]*/\1/g;y/,/\n/' 1> ${IO_FILE}

return 0
}

function POST_URL()
{
IO_FILE="$1"

# Read values from IO File

source ${IO_FILE}

BASEURL="https://${CIMITRA_SERVER_ADDRESS}:${CIMITRA_SERVER_PORT}/api"

URL="${BASEURL}${ENDPOINT}" 

{
declare RESPONSE=`curl -k ${CURL_OUTPUT_MODE} -H 'Accept: application/json' \
-H "Authorization: Bearer ${CIMITRA_API_SESSION_TOKEN}" \
-X POST ${URL} -d @${JSON_INPUT_FILE} \
-H "Content-Type: application/json"`
} 1> /dev/null 2> /dev/null

echo "$RESPONSE" | sed -e 's/[}"]*\(.\)[{"]*/\1/g;y/,/\n/' 1> ${IO_FILE}

rm ${JSON_INPUT_FILE} 2> /dev/null

return 0
}


function CREATE_CIMITRA_FOLDER_ENTITY()
{
IO_FILE=$1
NAME=$2
DESCRIPTION=$3
PARENT_FOLDER_ID=$4
# Define JSON temp file
JSON_TEMP_FILE_ONE="${TEMP_FILE_DIRECTORY}/$$.1.tmp.json"

echo "{
    \"type\": 2,
    \"name\": \"${NAME}\",
    \"description\": \"${DESCRIPTION}\",
    \"status\": \"active\",
    \"parentFolderId\":  \"${PARENT_FOLDER_ID}\"
}" 1> ${JSON_TEMP_FILE_ONE}


# Define endpoint
ENDPOINT="/apps" 

# Add endoint and JSON temp file to I/O file
echo "ENDPOINT=\"${ENDPOINT}\"" > ${TEMP_FILE_ONE}
echo "JSON_INPUT_FILE=\"${JSON_TEMP_FILE_ONE}\"" >> ${TEMP_FILE_ONE}

# Call POST_URL Function
POST_URL "${IO_FILE}"
return 0
}


function CREATE_OR_ESTABLISH_CIMITRA_IMPORT_FOLDER()
{

TEMP_FILE_ONE="${TEMP_FILE_DIRECTORY}/$$.1.tmp"
HOSTNAME=`hostname | tr [a-z] [A-Z]`
echo ""
echo "Process: Discovering or Creating The Import Folder Structure"
ENDPOINT="/apps/${CIMITRA_ROOT_FOLDER_ID}/children" 
echo "ENDPOINT=\"${ENDPOINT}\"" > ${TEMP_FILE_ONE}
GET_URL "${TEMP_FILE_ONE}"

# Determine if the "IMPORT" Folder Exists
declare -i IMPORT_FOLDER_EXISTS=`grep -ic "name:IMPORT" ${TEMP_FILE_ONE}`

if [ $IMPORT_FOLDER_EXISTS -gt 0 ]
then
echo ""
echo "Success: Discovered the Folder Structure | IMPORT"
CIMITRA_IMPORT_ROOT_FOLDER_ID=`grep -iwB 1 "name:IMPORT" ${TEMP_FILE_ONE} | head -1 | awk -F : '{printf $2}'`
fi

# Make the IMPORT Folder
if [ $IMPORT_FOLDER_EXISTS -eq 0 ]
then
CREATE_CIMITRA_FOLDER_ENTITY "${TEMP_FILE_ONE}" "IMPORT" "Cimitra Import API" "${CIMITRA_ROOT_FOLDER_ID}" 
CIMITRA_IMPORT_ROOT_FOLDER_ID=`grep "_id:" ${TEMP_FILE_ONE} | head -1 | awk -F : '{printf $2}'`
echo ""
echo "Success: Created the Folder Structure | IMPORT"
fi

echo ""
echo "Process: Discovering or Creating The Import | Hostname Folder Structure"
ENDPOINT="/apps/${CIMITRA_IMPORT_ROOT_FOLDER_ID}/children" 
echo "ENDPOINT=\"${ENDPOINT}\"" > ${TEMP_FILE_ONE}

GET_URL "${TEMP_FILE_ONE}"

# Determine if the "HOSTNAME" Folder Exists
declare -i HOSTNAME_FOLDER_EXISTS=`grep -ic "name:${HOSTNAME}" ${TEMP_FILE_ONE}`

if [ $HOSTNAME_FOLDER_EXISTS -gt 0 ]
then
echo ""
echo "Success: Discovered the Folder Structure | ${HOSTNAME}"
CIMITRA_IMPORT_HOSTNAME_ROOT_FOLDER_ID=`grep -iwB 1 "name:${HOSTNAME}" ${TEMP_FILE_ONE} | head -1 | awk -F : '{printf $2}'`
fi

# Make the HOSTNAME Folder
if [ $HOSTNAME_FOLDER_EXISTS -eq 0 ]
then
CREATE_CIMITRA_FOLDER_ENTITY "${TEMP_FILE_ONE}" "${HOSTNAME}" "Cimitra Import API | Server: ${HOSTNAME} Imported Commands" "${CIMITRA_IMPORT_ROOT_FOLDER_ID}" 
CIMITRA_IMPORT_HOSTNAME_ROOT_FOLDER_ID=`grep "_id:" ${TEMP_FILE_ONE} | head -1 | awk -F : '{printf $2}'`
echo ""
echo "Success: Created the Folder Structure | ${HOSTNAME}"
fi

rm ${TEMP_FILE_ONE} 2> /dev/null

}


function ESTABLISH_CIMITRA_API_SESSION()
{

echo ""
echo "Process: Establishing Connection to Cimitra Server"

BASEURL="https://${CIMITRA_SERVER_ADDRESS}:${CIMITRA_SERVER_PORT}/api" 

ENDPOINT="/users/login" 

URL="${BASEURL}${ENDPOINT}" 

DATA="{\"email\":\"${CIMITRA_SERVER_ADMIN_ACCOUNT}\",\"password\": \"${CIMITRA_SERVER_ADMIN_PASSWORD}\"}" 

{
RESPONSE=`curl -k -f -H "Content-Type:application/json" -X POST ${URL} --data "$DATA"`
} 2> /dev/null

declare -i STATUS=`echo "${RESPONSE}" | grep -c ',\"homeFolderId\":\"'` 

if [ ${STATUS} -eq 0 ] 
then 
echo "--------------------------------------------------"
echo ""
curl -k ${CURL_OUTPUT_MODE} -H "Content-Type:application/json" -X POST ${URL} --data "$DATA"
echo ""
echo "--------------------------------------------------"
echo "" 
echo "Error: Could Not Establish Connection to Cimitra Server" 
echo ""
exit 1 
fi 

CIMITRA_API_SESSION_TOKEN=`echo "${RESPONSE}" | awk -F \"token\":\" '{printf $2}' | awk -F \" '{printf $1}'`

echo ""
echo "Success: Established Connection to Cimitra Server"


echo "$RESPONSE" 1> ${TEMP_FILE_ONE}

sed -e 's/[}"]*\(.\)[{"]*/\1/g;y/,/\n/' < ${TEMP_FILE_ONE} > ${TEMP_FILE_TWO}

declare -i ADMIN_USER=`cat ${TEMP_FILE_TWO} | grep -ic "${CIMITRA_ADMIN_CHECK}"`

if [ $ADMIN_USER -eq 0 ]
then
echo "" 
echo "Error: The User ${CIMITRA_SERVER_ADMIN_ACCOUNT} Does Not Have Admin Rights!" 
echo ""
exit 1 
fi

CIMITRA_ROOT_FOLDER_ID=`cat ${TEMP_FILE_TWO} | grep -i "homeFolderId:" | head -1 | awk -F ":" '{printf $2}'`

rm ${TEMP_FILE_ONE} 2> /dev/null

rm ${TEMP_FILE_TWO} 2> /dev/null

}


function CONFIRM_CIMITRA_SERVER_CONNECTIVITY()
{

echo ""
echo "Process: Testing Connection to Cimitra Server"

CIMITRA_AGENT_BIN_FILE_LINUX="/usr/bin/cimagent"
CIMITRA_AGENT_BIN_FILE_MAC="/usr/local/bin/cimagent"
declare CIMITRA_AGENT_BIN_FILE="${CIMITRA_AGENT_BIN_FILE_LINUX}"
declare -i LINUX=`test -f ${CIMITRA_AGENT_BIN_FILE_LINUX} ; echo $?`
declare -i MAC=`test -f ${CIMITRA_AGENT_BIN_FILE_MAC} ; echo $?`
declare -i NODE="1"
declare -i MAC_OR_LINUX=0


if [ $LINUX -eq 0 ]
then
CIMITRA_AGENT_BIN_FILE="${CIMITRA_AGENT_BIN_FILE_LINUX}"
MAC_OR_LINUX=1
else

	if [ $MAC -eq 0 ]
	then
	CIMITRA_AGENT_BIN_FILE="${CIMITRA_AGENT_BIN_FILE_MAC}"
	MAC_OR_LINUX=1
	else
	NODE="0"
 	CIMITRA_AGENT_BIN_FILE=`ps -eaf | grep -v grep | grep 'cimagent.js s' | awk -F node '{printf $2}'`
	fi

fi

declare -i CIMITRA_AGENT_BIN_FILE_EXISTS=`test -f ${CIMITRA_AGENT_BIN_FILE} ; echo $?`

if [ $CIMITRA_AGENT_BIN_FILE_EXISTS -ne 0 ]
then
echo ""
echo "Error: A Cimitra Agent is Not Installed"
echo ""
exit 1
fi

TEMP_FILE_ONE="${TEMP_FILE_DIRECTORY}/$$.1.tmp"

TEMP_FILE_TWO="${TEMP_FILE_DIRECTORY}/$$.2.tmp"

if [ $MAC_OR_LINUX -eq 1 ]
then
${CIMITRA_AGENT_BIN_FILE} 1> ${TEMP_FILE_ONE}
else
node ${CIMITRA_AGENT_BIN_FILE} 1> ${TEMP_FILE_ONE}
fi

CIMITRA_SERVER_ADDRESS=`cat ${TEMP_FILE_ONE} | grep -iA 1 "hostname" | tail -1 | awk -F "=" '{printf $2}' | sed 's/ //g'`

CIMITRA_SERVER_PORT=`cat ${TEMP_FILE_ONE} | grep -iA 1 "hostport" | tail -1 | awk -F "=" '{printf $2}' | sed 's/ //g'`

CIMITRA_PAIRED_AGENT_ID=`cat ${TEMP_FILE_ONE} | grep -iA 1 "agentid" | tail -1 | awk -F "=" '{printf $2}' | sed 's/ //g'`


rm $TEMP_FILE_ONE

{
cat < /dev/tcp/${CIMITRA_SERVER_ADDRESS}:${CIMITRA_SERVER_PORT} &
} 2> /dev/null

CONNECTION_PROCESS=$!

declare -i CONNECTION_PROCESS_WORKED=`ps -aux | grep ${CONNECTION_PROCESS} | grep -c "cat"`

if [ $CONNECTION_PROCESS_WORKED -ne 0 ]
then
echo ""
echo "The Cimitra Server is Not Accessible"
echo ""
exit 1
fi

}

function CIMITRA_APP_CREATE_TWO_INPUTS()
{


IO_FILE="$1"

source ${IO_FILE}

echo ""
echo "Process: Creating Cimitra Application: ${NAME}"


JSON_TEMP_FILE_ONE="${TEMP_FILE_DIRECTORY}/$$.1.tmp.json"

BASEURL="https://${CIMITRA_SERVER_ADDRESS}:${CIMITRA_SERVER_PORT}/api" 

ENDPOINT="/apps" 

URL="${BASEURL}${ENDPOINT}"

source ${IO_FILE}

rm ${IO_FILE}

if [ $INCLUDE_REGEX_EXAMPLE_SWITCHES -eq 1 ]
then

echo "{
\"type\": 1,
\"status\": \"active\",
\"name\": \"${NAME}\",
\"parentFolderId\":  \"${PARENT_FOLDER_ID}\",
\"description\": \"\",
\"platform\": \"${CIMITRA_PAIRED_AGENT_PLATFORM}\",
\"agentId\": \"${CIMITRA_PAIRED_AGENT_ID}\",
\"interpreter\": \"${APP_INTERPRETER}\",
\"command\": \"${COMMAND}\",
\"params\": \"\",
\"notes\": \"\",
\"injectParams\": [
{
\"param\": \"-a\",
\"value\": \"INPUT_ONE\",
\"label\": \"SWITCH_ONE\",
\"placeholder\": \"\",
\"private\": false,
\"regex\": \"/^[A-Za-z-_0-9]+$/\"
},
{
\"param\": \"-b\",
\"value\": \"INPUT_TWO\",
\"label\": \"SWITCH_TWO\",
\"placeholder\": \"\",
\"private\": false,
\"regex\": \"/^[A-Za-z-_0-9+=^#@~ ]+$/\"
}
]
}" 1> ${JSON_TEMP_FILE_ONE}

else

echo "{
\"type\": 1,
\"status\": \"active\",
\"name\": \"${NAME}\",
\"parentFolderId\":  \"${PARENT_FOLDER_ID}\",
\"description\": \"\",
\"platform\": \"${CIMITRA_PAIRED_AGENT_PLATFORM}\",
\"agentId\": \"${CIMITRA_PAIRED_AGENT_ID}\",
\"interpreter\": \"${APP_INTERPRETER}\",
\"command\": \"${COMMAND}\",
\"params\": \"\",
\"notes\": \"\",
\"injectParams\":[]
}" 1> ${JSON_TEMP_FILE_ONE}


fi

{
RESPONSE=`curl -k ${CURL_OUTPUT_MODE} -H 'Accept: application/json' \
-H "Authorization: Bearer ${CIMITRA_API_SESSION_TOKEN}" \
-X POST ${URL} -d @${JSON_TEMP_FILE_ONE} \
-H "Content-Type: application/json"` 
} 1> /dev/null 2> /dev/null


if [ $VERBOSE_MODE -eq 1 ]
then
echo "${RESPONSE}"
fi

echo ""
echo "Success: Created Cimitra Application: ${NAME}"

rm ${JSON_TEMP_FILE_ONE} 2> /dev/null

}

function GET_CIMITRA_AGENT_DETAILS()
{

TEMP_FILE_ONE="${TEMP_FILE_DIRECTORY}/$$.1.tmp"

echo ""
echo "Process: Discovering Cimitra Agent Details"
# ENDPOINT="/agent/${CIMITRA_PAIRED_AGENT_ID}" 
ENDPOINT="/agent" 
echo "ENDPOINT=\"${ENDPOINT}\"" > ${TEMP_FILE_ONE}

GET_URL "${TEMP_FILE_ONE}"

CIMITRA_PAIRED_AGENT_PLATFORM=`cat ${TEMP_FILE_ONE} | grep "_id:${CIMITRA_PAIRED_AGENT_ID}\|platform:" | grep "platform:" | head -1 | awk -F ":" '{printf $2}'`

rm ${TEMP_FILE_ONE}
}

function CREATE_CIMITRA_APP()
{

if [ $VERBOSE_MODE -eq 1 ]
then
echo "Command In = $CIMITRA_APP_COMMAND_IN"
fi

if [ $CIMITRA_APP_NAME_IN_SET -eq 0 ]
then
CIMITRA_APP_NAME_ONE=`basename "${CIMITRA_APP_COMMAND_IN}" | tr [a-z] [A-Z]`
HOSTNAME=`hostname | tr [a-z] [A-Z]`
CIMITRA_APP_NAME_IN="${HOSTNAME} ${CIMITRA_APP_NAME_ONE}"
fi

if [ $CIMITRA_APP_INTERPRETER_IN_SET -eq 0 ]
then
CIMITRA_APP_INTERPRETER_IN=""
fi

if [ $VERBOSE_MODE -eq 1 ]
then
echo "App Name = $CIMITRA_APP_NAME_IN"
fi

echo "NAME=\"${CIMITRA_APP_NAME_IN}\"" > ${TEMP_FILE_ONE}
echo "DESCRIPTION=\"\"" >> ${TEMP_FILE_ONE}
echo "NOTES=\"Imported with Cimitra Import Utility\"" >> ${TEMP_FILE_ONE}
echo "PLATFORM=\"${CIMITRA_PAIRED_AGENT_PLATFORM}\"" >> ${TEMP_FILE_ONE}
echo "COMMAND=\"${CIMITRA_APP_COMMAND_IN}\"" >> ${TEMP_FILE_ONE}
echo "PARAMS=\"\"" >> ${TEMP_FILE_ONE}
echo "PARENT_FOLDER_ID=\"${CIMITRA_IMPORT_HOSTNAME_ROOT_FOLDER_ID}\"" >> ${TEMP_FILE_ONE}
echo "APP_INTERPRETER=\"${CIMITRA_APP_INTERPRETER_IN}\"" >> ${TEMP_FILE_ONE}

CIMITRA_APP_CREATE_TWO_INPUTS ${TEMP_FILE_ONE}
}

# The Main Function
function main()
{
if [ $SHOW_HELP_SCREEN -eq 1 ]
then
SHOW_HELP
exit 0
fi

CONFIRM_CORRECT_INPUT
echo -en "\033[0;93m\033[0;92m"
CONFIRM_CIMITRA_SERVER_CONNECTIVITY
ESTABLISH_CIMITRA_API_SESSION
GET_CIMITRA_AGENT_DETAILS
CREATE_OR_ESTABLISH_CIMITRA_IMPORT_FOLDER
CREATE_CIMITRA_APP
}

main

